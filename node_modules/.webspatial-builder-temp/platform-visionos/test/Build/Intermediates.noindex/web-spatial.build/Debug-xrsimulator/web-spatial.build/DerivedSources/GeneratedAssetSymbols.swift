import Foundation
#if canImport(AppKit)
import AppKit
#endif
#if canImport(UIKit)
import UIKit
#endif
#if canImport(SwiftUI)
import SwiftUI
#endif
#if canImport(DeveloperToolsSupport)
import DeveloperToolsSupport
#endif

#if SWIFT_PACKAGE
private let resourceBundle = Foundation.Bundle.module
#else
private class ResourceBundleClass {}
private let resourceBundle = Foundation.Bundle(for: ResourceBundleClass.self)
#endif

// MARK: - Color Symbols -

@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.ColorResource {

}

// MARK: - Image Symbols -

@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.ImageResource {

    /// The "AppIcon" asset catalog resource namespace.
    enum AppIcon {

        /// The "AppIcon/Middle" asset catalog resource namespace.
        enum Middle {

            /// The "AppIcon/Middle/Content" asset catalog image resource.
            static let content = DeveloperToolsSupport.ImageResource(name: "AppIcon/Middle/Content", bundle: resourceBundle)

        }

        /// The "AppIcon/Back" asset catalog resource namespace.
        enum Back {

            /// The "AppIcon/Back/Content" asset catalog image resource.
            static let content = DeveloperToolsSupport.ImageResource(name: "AppIcon/Back/Content", bundle: resourceBundle)

        }

    }

    /// The "arrow_left" asset catalog image resource.
    static let arrowLeft = DeveloperToolsSupport.ImageResource(name: "arrow_left", bundle: resourceBundle)

    /// The "arrow_right" asset catalog image resource.
    static let arrowRight = DeveloperToolsSupport.ImageResource(name: "arrow_right", bundle: resourceBundle)

    /// The "back" asset catalog image resource.
    static let back = DeveloperToolsSupport.ImageResource(name: "back", bundle: resourceBundle)

    /// The "browser" asset catalog image resource.
    static let browser = DeveloperToolsSupport.ImageResource(name: "browser", bundle: resourceBundle)

    /// The "close" asset catalog image resource.
    static let close = DeveloperToolsSupport.ImageResource(name: "close", bundle: resourceBundle)

    /// The "copy" asset catalog image resource.
    static let copy = DeveloperToolsSupport.ImageResource(name: "copy", bundle: resourceBundle)

    /// The "home" asset catalog image resource.
    static let home = DeveloperToolsSupport.ImageResource(name: "home", bundle: resourceBundle)

    /// The "link" asset catalog image resource.
    static let link = DeveloperToolsSupport.ImageResource(name: "link", bundle: resourceBundle)

    /// The "logo" asset catalog image resource.
    static let logo = DeveloperToolsSupport.ImageResource(name: "logo", bundle: resourceBundle)

    /// The "more" asset catalog image resource.
    static let more = DeveloperToolsSupport.ImageResource(name: "more", bundle: resourceBundle)

    /// The "nav" asset catalog image resource.
    static let nav = DeveloperToolsSupport.ImageResource(name: "nav", bundle: resourceBundle)

    /// The "refresh" asset catalog image resource.
    static let refresh = DeveloperToolsSupport.ImageResource(name: "refresh", bundle: resourceBundle)

}

// MARK: - Color Symbol Extensions -

#if canImport(AppKit)
@available(macOS 14.0, *)
@available(macCatalyst, unavailable)
extension AppKit.NSColor {

}
#endif

#if canImport(UIKit)
@available(iOS 17.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension UIKit.UIColor {

}
#endif

#if canImport(SwiftUI)
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Color {

}

@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.Color {

}
#endif

// MARK: - Image Symbol Extensions -

#if canImport(AppKit)
@available(macOS 14.0, *)
@available(macCatalyst, unavailable)
extension AppKit.NSImage {

    /// The "AppIcon" asset catalog resource namespace.
    enum AppIcon {

        /// The "AppIcon/Middle" asset catalog resource namespace.
        enum Middle {

            /// The "AppIcon/Middle/Content" asset catalog image.
            static var content: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
                .init(resource: .AppIcon.Middle.content)
#else
                .init()
#endif
            }

        }

        /// The "AppIcon/Back" asset catalog resource namespace.
        enum Back {

            /// The "AppIcon/Back/Content" asset catalog image.
            static var content: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
                .init(resource: .AppIcon.Back.content)
#else
                .init()
#endif
            }

        }

    }

    /// The "arrow_left" asset catalog image.
    static var arrowLeft: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .arrowLeft)
#else
        .init()
#endif
    }

    /// The "arrow_right" asset catalog image.
    static var arrowRight: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .arrowRight)
#else
        .init()
#endif
    }

    /// The "back" asset catalog image.
    static var back: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .back)
#else
        .init()
#endif
    }

    /// The "browser" asset catalog image.
    static var browser: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .browser)
#else
        .init()
#endif
    }

    /// The "close" asset catalog image.
    static var close: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .close)
#else
        .init()
#endif
    }

    /// The "copy" asset catalog image.
    static var copy: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .copy)
#else
        .init()
#endif
    }

    /// The "home" asset catalog image.
    static var home: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .home)
#else
        .init()
#endif
    }

    /// The "link" asset catalog image.
    static var link: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .link)
#else
        .init()
#endif
    }

    /// The "logo" asset catalog image.
    static var logo: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .logo)
#else
        .init()
#endif
    }

    /// The "more" asset catalog image.
    static var more: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .more)
#else
        .init()
#endif
    }

    /// The "nav" asset catalog image.
    static var nav: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .nav)
#else
        .init()
#endif
    }

    /// The "refresh" asset catalog image.
    static var refresh: AppKit.NSImage {
#if !targetEnvironment(macCatalyst)
        .init(resource: .refresh)
#else
        .init()
#endif
    }

}
#endif

#if canImport(UIKit)
@available(iOS 17.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension UIKit.UIImage {

    /// The "AppIcon" asset catalog resource namespace.
    enum AppIcon {

        /// The "AppIcon/Middle" asset catalog resource namespace.
        enum Middle {

            /// The "AppIcon/Middle/Content" asset catalog image.
            static var content: UIKit.UIImage {
#if !os(watchOS)
                .init(resource: .AppIcon.Middle.content)
#else
                .init()
#endif
            }

        }

        /// The "AppIcon/Back" asset catalog resource namespace.
        enum Back {

            /// The "AppIcon/Back/Content" asset catalog image.
            static var content: UIKit.UIImage {
#if !os(watchOS)
                .init(resource: .AppIcon.Back.content)
#else
                .init()
#endif
            }

        }

    }

    /// The "arrow_left" asset catalog image.
    static var arrowLeft: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .arrowLeft)
#else
        .init()
#endif
    }

    /// The "arrow_right" asset catalog image.
    static var arrowRight: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .arrowRight)
#else
        .init()
#endif
    }

    /// The "back" asset catalog image.
    static var back: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .back)
#else
        .init()
#endif
    }

    /// The "browser" asset catalog image.
    static var browser: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .browser)
#else
        .init()
#endif
    }

    /// The "close" asset catalog image.
    static var close: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .close)
#else
        .init()
#endif
    }

    /// The "copy" asset catalog image.
    static var copy: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .copy)
#else
        .init()
#endif
    }

    /// The "home" asset catalog image.
    static var home: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .home)
#else
        .init()
#endif
    }

    /// The "link" asset catalog image.
    static var link: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .link)
#else
        .init()
#endif
    }

    /// The "logo" asset catalog image.
    static var logo: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .logo)
#else
        .init()
#endif
    }

    /// The "more" asset catalog image.
    static var more: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .more)
#else
        .init()
#endif
    }

    /// The "nav" asset catalog image.
    static var nav: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .nav)
#else
        .init()
#endif
    }

    /// The "refresh" asset catalog image.
    static var refresh: UIKit.UIImage {
#if !os(watchOS)
        .init(resource: .refresh)
#else
        .init()
#endif
    }

}
#endif

// MARK: - Thinnable Asset Support -

@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(watchOS, unavailable)
extension DeveloperToolsSupport.ColorResource {

    private init?(thinnableName: Swift.String, bundle: Foundation.Bundle) {
#if canImport(AppKit) && os(macOS)
        if AppKit.NSColor(named: NSColor.Name(thinnableName), bundle: bundle) != nil {
            self.init(name: thinnableName, bundle: bundle)
        } else {
            return nil
        }
#elseif canImport(UIKit) && !os(watchOS)
        if UIKit.UIColor(named: thinnableName, in: bundle, compatibleWith: nil) != nil {
            self.init(name: thinnableName, bundle: bundle)
        } else {
            return nil
        }
#else
        return nil
#endif
    }

}

#if canImport(UIKit)
@available(iOS 17.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension UIKit.UIColor {

    private convenience init?(thinnableResource: DeveloperToolsSupport.ColorResource?) {
#if !os(watchOS)
        if let resource = thinnableResource {
            self.init(resource: resource)
        } else {
            return nil
        }
#else
        return nil
#endif
    }

}
#endif

#if canImport(SwiftUI)
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Color {

    private init?(thinnableResource: DeveloperToolsSupport.ColorResource?) {
        if let resource = thinnableResource {
            self.init(resource)
        } else {
            return nil
        }
    }

}

@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ShapeStyle where Self == SwiftUI.Color {

    private init?(thinnableResource: DeveloperToolsSupport.ColorResource?) {
        if let resource = thinnableResource {
            self.init(resource)
        } else {
            return nil
        }
    }

}
#endif

@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(watchOS, unavailable)
extension DeveloperToolsSupport.ImageResource {

    private init?(thinnableName: Swift.String, bundle: Foundation.Bundle) {
#if canImport(AppKit) && os(macOS)
        if bundle.image(forResource: NSImage.Name(thinnableName)) != nil {
            self.init(name: thinnableName, bundle: bundle)
        } else {
            return nil
        }
#elseif canImport(UIKit) && !os(watchOS)
        if UIKit.UIImage(named: thinnableName, in: bundle, compatibleWith: nil) != nil {
            self.init(name: thinnableName, bundle: bundle)
        } else {
            return nil
        }
#else
        return nil
#endif
    }

}

#if canImport(AppKit)
@available(macOS 14.0, *)
@available(macCatalyst, unavailable)
extension AppKit.NSImage {

    private convenience init?(thinnableResource: DeveloperToolsSupport.ImageResource?) {
#if !targetEnvironment(macCatalyst)
        if let resource = thinnableResource {
            self.init(resource: resource)
        } else {
            return nil
        }
#else
        return nil
#endif
    }

}
#endif

#if canImport(UIKit)
@available(iOS 17.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension UIKit.UIImage {

    private convenience init?(thinnableResource: DeveloperToolsSupport.ImageResource?) {
#if !os(watchOS)
        if let resource = thinnableResource {
            self.init(resource: resource)
        } else {
            return nil
        }
#else
        return nil
#endif
    }

}
#endif

