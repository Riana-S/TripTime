"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const semver_1 = require("semver");
const FetchUtils_1_1 = require("./lib/utils/FetchUtils-1");
const build_1 = require("./lib/cmds/build");
const version_1 = require("./lib/cmds/version");
const fetch_1 = require("./lib/utils/fetch");
const launch_1 = require("./lib/cmds/launch");
const shutdown_1 = require("./lib/cmds/shutdown");
const test_1 = require("./lib/cmds/test");
module.exports = async () => {
    if ((0, semver_1.major)(process.versions.node) < 14) {
        throw new Error(`Current Node.js version is ${process.versions.node}.` +
            ' Node.js version 14 or above is required to run XRAPP BUILDER.');
    }
    const program = new commander_1.Command();
    FetchUtils_1_1.fetchUtils.setFetch(fetch_1.fetch);
    FetchUtils_1_1.fetchUtils.setDownloadFile(fetch_1.downloadFile);
    FetchUtils_1_1.fetchUtils.setDecompressResponseBuffer(fetch_1.decompressResponseBuffer);
    await setupCommands(program);
    await program.parseAsync(process.argv);
};
async function setupCommands(program) {
    const v = await (0, version_1.getVersion)();
    program
        .name('webspatial-builder')
        .description('WebSpatial Builder is a client-side CLI tool used to generate cross platform XRApp projects.')
        .version(v, '-v, --version')
        .configureHelp({ showGlobalOptions: true });
    // run command
    program
        .command('run')
        .description('By compiling or running directly on the simulator the WebSpatial App')
        .option('--manifest <manifest>', 'manifest path')
        .option('--project <project>', 'project path')
        .option('--manifest-url <manifestUrl>', 'manifest url')
        .option('--platform <platform>', 'xr platform')
        .option('--base <base>', 'base path')
        .option('--bundle-id <bundleId>', 'bundle id')
        .option('--tryWithoutBuild <tryWithoutBuild>', 'run without build')
        .action(async (options) => {
        await (0, build_1.run)(options);
    });
    // build command
    program
        .command('build')
        .description('Build WebSpatial App')
        .option('--manifest <manifest>', 'manifest path')
        .option('--project <project>', 'project path')
        .option('--manifest-url <manifest-url>', 'manifest url')
        .option('--platform <platform>', 'xr platform')
        .option('--version <version>', 'app version')
        .option('--buildType <buildType>', 'app build type')
        .option('--export <export>', 'export path')
        .option('--bundle-id <bundleId>', 'bundle id')
        .requiredOption('--base <base>', 'base path')
        .requiredOption('--teamId <teamId>', 'team id')
        .action(async (options) => {
        console.log(options);
        await (0, build_1.build)(options);
    });
    // store command
    program
        .command('publish')
        .description('Publish WebSpatial App')
        .option('--manifest <manifest>', 'manifest path')
        .option('--project <project>', 'project path')
        .option('--manifest-url <manifestUrl>', 'manifest url')
        .option('--platform <platform>', 'xr platform')
        .option('--buildType <buildType>', 'app build type')
        .option('--export <export>', 'export path')
        .option('--bundle-id <bundleId>', 'bundle id')
        .requiredOption('--base <base>', 'base path')
        .requiredOption('--teamId <teamId>', 'team id')
        .requiredOption('--version <version>', 'app version')
        .requiredOption('--u <username>', 'username')
        .requiredOption('--p <password>', 'password')
        .action(async (options) => {
        console.log(options);
        await (0, build_1.store)(options);
    });
    // launch command
    program
        .command('launch')
        .description('Launch WebSpatial App')
        .option('--bundle-id <bundleId>', 'bundle id')
        .action(async (options) => {
        console.log(options);
        await (0, launch_1.launch)(options);
    });
    // shutdown command
    program
        .command('shutdown')
        .description('Shutdown Simulator')
        .action(async (options) => {
        console.log(options);
        await (0, shutdown_1.shutdown)(options);
    });
    program.command('test').action(async (options) => {
        console.log(options);
        (0, test_1.test)();
    });
}
