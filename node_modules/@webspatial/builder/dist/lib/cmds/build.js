"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = build;
exports.store = store;
exports.run = run;
const pwa_1 = require("../pwa");
const resource_1 = require("../resource");
const xcode_1 = require("../xcode");
const check_1 = require("./check");
const history_1 = require("../utils/history");
// build and export ipa
async function build(args) {
    var _a;
    console.log('------------------- parse start -------------------');
    resource_1.ResourceManager.initPlatform(args['platform']);
    const manifestInfo = await doPwa(args);
    const icon = await doReadyProject((_a = args['project']) !== null && _a !== void 0 ? _a : 'dist', manifestInfo);
    await doXcode(args, icon, manifestInfo);
    console.log('------------------- parse end -------------------');
    await xcode_1.XcodeManager.build(args['export']);
    return manifestInfo;
}
// build and upload ipa to App Store Connect
async function store(args) {
    resource_1.ResourceManager.initPlatform(args['platform']);
    (0, check_1.checkStoreParams)(args);
    /*
      There are two ways to upload ipa to App Store Connect:
      1. Using parameters from the build command, then this command will first archive and export before uploading
      2. Use the name parameter to specify the IPA name, then this command will skip archiving and exporting, and directly find the specified IPA file in the export folder and execute the upload
    */
    let appInfo = { name: 'WebSpatialTest' };
    args['buildType'] = 'app-store-connect';
    if (args['name']) {
        appInfo.name = args['name'];
    }
    else {
        const manifestInfo = await build(args);
        appInfo.name = manifestInfo.json.name;
    }
    await xcode_1.XcodeManager.upload(args, appInfo);
}
// build and run on simulator
async function run(args) {
    var _a;
    const runCmd = JSON.stringify(args);
    history_1.default.init(runCmd);
    resource_1.ResourceManager.setupTempPath(args['platform']);
    console.log('------------------- parse start -------------------');
    const manifestInfo = await doPwa(args, true);
    history_1.default.recordManifest(manifestInfo.json);
    /*
      If it is an online project, there is no need to worry about project changes, just ensure that the parameters are consistent with the previous time and there is no need to compile again.
      If it is a local project, there is a risk of project changes, so it needs to be compiled again.
      If the --tryWithoutBuild=true parameter is used, it will be judged whether it is the same as the previous command.
      If it is the same, it will be defaulted as already compiled, and the compilation will be skipped and the application will be launched directly.
    */
    // fixme: the cache not invalidate when npm version change
    if (manifestInfo.fromNet || args['tryWithoutBuild'] === 'true') {
        // If this command is a new command, go through the build process; otherwise, go through the launch process
        if (history_1.default.checkManifest(manifestInfo.json) &&
            history_1.default.checkTestAppIsExist()) {
            console.log('Same as the previous record');
            await xcode_1.XcodeManager.runWithHistory();
            return;
        }
    }
    resource_1.ResourceManager.pullPlatformModule(args['platform']);
    const icon = await doReadyProject((_a = args['project']) !== null && _a !== void 0 ? _a : 'dist', manifestInfo);
    await doXcode(args, icon, manifestInfo, true);
    console.log('------------------- parse end -------------------');
    await xcode_1.XcodeManager.runWithSimulator();
}
/**
 * PWA steps
 * 1.  Load manifestion.json
 * 2.  Check the integrity of manifestion.json parameters
 * 3.  Detecting start_url rule
 * 4.  Improve start_url, scope, display, and deeplink configurations
 **/
async function doPwa(args, isDev = false) {
    (0, check_1.checkBuildParams)(args, isDev);
    return await pwa_1.PWAGenerator.generator(args, isDev);
}
/**
 * *Resource steps
 * 1.  If it is a local project, then
 *  A. Check and create project directory
 *  B. Mobile Web Engineering
 * 2.  Generate icon icon
 **/
async function doReadyProject(project, manifestInfo) {
    if (!manifestInfo.fromNet) {
        // If it is a local project, the project needs to be moved.
        await resource_1.ResourceManager.moveProjectFrom(project);
        console.log('move web project: ok');
    }
    return await resource_1.ResourceManager.generateIcon(manifestInfo);
}
/**
 * Xcode steps
 * 1.  Parse the project
 * 2.  Configure teamId
 * 3.  Bind web project
 * 4.  Configure icon
 * 5.  Configure manifest
 * 6.  Write project
 **/
async function doXcode(args, icon, manifestInfo, isDev = false) {
    await xcode_1.XcodeManager.parseProject({
        icon,
        manifestInfo,
        teamId: args['teamId'],
        version: args['version'],
        buildType: args['buildType'],
        export: args['export'],
    }, isDev);
}
