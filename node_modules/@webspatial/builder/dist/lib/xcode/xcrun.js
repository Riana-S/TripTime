"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const resource_1 = require("../resource");
const path_1 = require("path");
const fs = require("fs");
const xcodebuild_1 = require("./xcodebuild");
const file_1 = require("../resource/file");
const utils_1 = require("../utils/utils");
const history_1 = require("../utils/history");
class Xcrun {
    static async validate(path, key1, key2, useAccount) {
        const cmd = new XcrunCMD().altool();
        cmd.validate(path);
        if (useAccount) {
            cmd.authAccount(key1, key2);
        }
        else {
            cmd.authApi(key1, key2);
        }
        cmd.platform('visionos');
        const res = (0, child_process_1.execSync)(cmd.line);
        return res.toString();
    }
    static async uploadPackage(path, key1, key2, appleId, useAccount) {
        const cmd = new XcrunCMD().altool();
        cmd.uploadPackage(path);
        if (useAccount) {
            cmd.authAccount(key1, key2);
        }
        else {
            cmd.authApi(key1, key2);
        }
        cmd.platform('visionos');
        cmd.appleId(appleId);
        const res = (0, child_process_1.execSync)(cmd.line);
        return res.toString();
    }
    static async uploadApp(path, key1, key2, useAccount) {
        const cmd = new XcrunCMD().altool();
        cmd.uploadApp(path);
        if (useAccount) {
            cmd.authAccount(key1, key2);
        }
        else {
            cmd.authApi(key1, key2);
        }
        cmd.platform('visionos');
        const res = (0, child_process_1.execSync)(cmd.line);
        return res.toString();
    }
    /**
     * @description
     * Find suitable simulator device
     * Attempt to build a testing app
     * Try running the test app on the simulator
     */
    static async runWithSimulator() {
        let deviceList = this.findSimulator();
        if (!deviceList[0]) {
            deviceList = [this.createSimulator()];
        }
        const recordAppInfo = history_1.default.getAppInfoRecord();
        for (var i = 0; i < deviceList.length; i++) {
            if (this.buildTestApp(deviceList[i].deviceId)) {
                const launchedDeviceId = this.launchWithSimulator(recordAppInfo, deviceList[i].deviceId, false);
                history_1.default.recordSimulator(launchedDeviceId);
                history_1.default.write();
                return;
            }
            else {
                utils_1.CliLog.error(`build failed on ${deviceList[i].deviceId}, try next device`);
            }
        }
        utils_1.CliLog.error('no simulator available');
    }
    /**
     * @description
     * Attempt to launch the app using information from the history
     */
    static async runWithHistory() {
        const historyDeviceId = history_1.default.getSimulatorHistory();
        const historyAppInfo = history_1.default.getAppInfoRecord();
        const launchedDeviceId = this.launchWithSimulator(historyAppInfo, historyDeviceId);
        history_1.default.recordSimulator(launchedDeviceId);
        history_1.default.write();
    }
    /**
     * @description
     * Find a simulator with the given deviceId
     * If no deviceId is provided, find the first available simulator
     * If no simulator is found, create a new simulator
     * @param deviceId The deviceId of the simulator to find, defaulting to the first available simulator
     * @param appInfo
     *  appInfo.name is used for installing applications
     *  appInfo.id is used to launch the application
     * @returns The simulator device uuid
     */
    static launchWithSimulator(appInfo, deviceId = '', needFind = true) {
        let device;
        if (needFind) {
            device = this.findSimulator(deviceId)[0];
        }
        else {
            device = this.searchSimulator(deviceId);
        }
        if (!device || device.deviceId === '') {
            device = this.createSimulator();
        }
        console.log(`use simulator: ${device.deviceId}`);
        // launch visionOS simulator
        this.launchSimulator(device);
        try {
            this.terminateApp(device.deviceId, appInfo.id);
        }
        catch (_a) { }
        // install app
        console.log('installing app');
        this.installApp(resource_1.PROJECT_TEST_DIRECTORY, device.deviceId, appInfo.name);
        console.log('install success');
        // launch app
        console.log('launch app');
        this.launchApp(device.deviceId, appInfo.id);
        return device.deviceId;
    }
    static async shutdownSimulator() {
        let device = this.findSimulator()[0];
        console.log(`find simulator: ${device.deviceId}`);
        if (device.state !== 'Shutdown') {
            let cmd = new XcrunCMD().simctl();
            cmd.shutdown(device.deviceId);
            (0, child_process_1.execSync)(cmd.line);
        }
        else {
            console.log('simulator is already shutdown');
        }
    }
    static launchSimulator(device) {
        // boot visionOS simulator if not booted
        if (device.state === 'Shutdown') {
            let cmd = new XcrunCMD().simctl();
            cmd.boot(device.deviceId);
            (0, child_process_1.execSync)(cmd.line);
            // wait 10s for simulator to boot
            (0, child_process_1.execSync)('sleep 10');
        }
        // open simulator
        (0, child_process_1.execSync)('open -a Simulator --args -CurrentDeviceUDID ' + device.deviceId);
    }
    static buildTestApp(deviceId) {
        const projectFile = resource_1.PROJECT_DIRECTORY + '/web-spatial.xcodeproj';
        if (!fs.existsSync(resource_1.PROJECT_BUILD_DIRECTORY)) {
            fs.mkdirSync(resource_1.PROJECT_BUILD_DIRECTORY, { recursive: true });
        }
        if (!fs.existsSync(resource_1.PROJECT_TEST_DIRECTORY)) {
            fs.mkdirSync(resource_1.PROJECT_TEST_DIRECTORY, { recursive: true });
        }
        (0, file_1.clearDir)(resource_1.PROJECT_TEST_DIRECTORY);
        const buildCMD = new xcodebuild_1.XcodebuildCMD().project(projectFile).line +
            ` build -scheme web-spatial -destination 'platform=visionOS Simulator,id=${deviceId}' -derivedDataPath ${resource_1.PROJECT_TEST_DIRECTORY}`;
        console.log(`---- build start on ${deviceId} ----`);
        try {
            const res = (0, child_process_1.execSync)(buildCMD);
            if (res.toString().includes('** BUILD FAILED **')) {
                console.log(res.toString());
                return false;
            }
        }
        catch (e) {
            console.log(e);
            return false;
        }
        console.log('------------------- build end -------------------');
        return true;
    }
    static terminateApp(deviceId, appId) {
        (0, child_process_1.execSync)(new XcrunCMD().simctl().terminate(deviceId, appId).line);
    }
    static installApp(path, deviceId, appName) {
        const appFile = (0, path_1.join)(path, `Build/Products/Debug-xrsimulator/${appName}.app`);
        let cmd = new XcrunCMD().simctl();
        cmd.install(deviceId, appFile);
        (0, child_process_1.execSync)(cmd.line);
    }
    static launchApp(deviceId, bundleId) {
        (0, child_process_1.execSync)(new XcrunCMD().simctl().launch(deviceId, bundleId).line);
    }
    /*
     * use command to find available destinations for the "web-spatial" scheme
     * command: xcodebuild -showdestinations -scheme web-spatial
     * result like:
     * { platform:visionOS, id:dvtdevice-DVTiOSDevicePlaceholder-xros:placeholder, name:Any visionOS Device }
     * { platform:visionOS Simulator, id:dvtdevice-DVTiOSDeviceSimulatorPlaceholder-xrsimulator:placeholder, name:Any visionOS Simulator Device }
     * { platform:visionOS Simulator, id:8C7AD003-4039-478F-9F94-938876D57817, OS:2.3, name:Apple Vision Pro }
     * { platform:visionOS Simulator, id:3E883774-AFD3-4E0D-884C-FA9B940F8720, OS:2.3, name:WebSpatialSimulator }
     *
     * only uuid deviceId is valid
     */
    static parseDestinationDevices(devices) {
        let res = devices.split('\n');
        const uuidRegex = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/;
        let deviceList = [];
        for (let i = 0; i < res.length; i++) {
            if (res[i].includes('platform:visionOS Simulator')) {
                const uuid = res[i].slice(res[i].indexOf('id:') + 3, res[i].indexOf(', name'));
                if (uuidRegex.test(uuid)) {
                    deviceList.push(uuid);
                    console.log(`find destination device: ${res[i]})`);
                }
            }
        }
        return deviceList;
    }
    /*
     * use command to find available simDevice when create a simulator
     * command: xcrun simctl list devicetypes
     * result like:
     * Apple Watch Series 2 (38mm) (com.apple.CoreSimulator.SimDeviceType.Apple-Watch-Series-2-38mm)
     * Apple Vision Pro (com.apple.CoreSimulator.SimDeviceType.Apple-Vision-Pro)
     *
     * only Apple Vision Pro is valid
     */
    static parseSupportDevices(devices) {
        let res = devices.split('\n');
        for (let i = 0; i < res.length; i++) {
            if (res[i].includes('Apple Vision Pro')) {
                res[i] = res[i].replace('Apple Vision Pro', '').trim();
                res[i] = res[i].replace('(', '');
                res[i] = res[i].replace(')', '');
                return res[i];
            }
        }
        throw new Error('No Apple Vision Pro simulator found! Please go to Xcode to download the Apple Vision Pro simulator');
    }
    /*
     * use command to find available runtime when create a simulator
     * command: xcrun simctl list devicetypes
     * result like:
     * iOS 17.2 (17.2 - 21C62) - com.apple.CoreSimulator.SimRuntime.iOS-17-2
     * visionOS 2.3 (2.3 - 22N895) - com.apple.CoreSimulator.SimRuntime.xrOS-2-3
     *
     * only visionOS is valid
     */
    static parseSupportRuntimes(runtimes) {
        let res = runtimes.split('\n');
        for (let i = 0; i < res.length; i++) {
            if (res[i].includes('visionOS')) {
                return res[i].slice(res[i].indexOf('com')).trim();
            }
        }
        throw new Error('No visionOS rumtime found! Please go to Xcode to download the Apple Vision Pro simulator');
    }
    /*
     * use command to find all sumlators about "Apple Vision Pro"
     * command: xcrun simctl list devices "Apple Vision Pro"
     * result like:
     * == Devices ==
     *   -- iOS 17.2 --
     *   -- visionOS 2.3 --
     *       Apple Vision Pro (8C7AD003-4039-478F-9F94-938876D57817) (Shutdown)
     *       WebSpatialSimulator (C57E4C63-BF38-4E49-B1DC-8F1775A89712) (Shutdown)
     */
    static parseListDevices(devices) {
        let res = devices.split('\n');
        let list = [];
        let findIndex = -1;
        for (let i = 0; i < res.length; i++) {
            if (res[i].includes('-- visionOS')) {
                findIndex = i; // start add visionOS simulator
            }
            else if (findIndex > 0) {
                if (res[i].includes('-- ')) {
                    // end add visionOS simulator
                    break;
                }
                if (res[i].length > 0) {
                    list.push(this.parseDeviceInfo(res[i]));
                }
            }
        }
        return list;
    }
    /*
     * device info like:
     * Apple Vision Pro (8C7AD003-4039-478F-9F94-938876D57817) (Shutdown)
     */
    static parseDeviceInfo(device) {
        const info = device.split('(');
        const deviceInfo = {
            name: info[0].trim(),
            deviceId: info[1].split(')')[0].trim(),
            state: info[2].split(')')[0].trim(),
        };
        return deviceInfo;
    }
    // Try to find an available simulator, if not, create one and save the running record for the next time direct use.
    static findSimulator(deviceId) {
        let device = [deviceId !== null && deviceId !== void 0 ? deviceId : ''];
        const res = (0, child_process_1.execSync)(`cd ${resource_1.PROJECT_DIRECTORY} && xcodebuild -showdestinations -scheme web-spatial`);
        const arr = this.parseDestinationDevices(res.toString());
        device = [...device, ...arr];
        let simList = this.listSimulator();
        // Sorting logic: Prioritize the DeviceId in the device array
        simList.sort((a, b) => {
            const aIndex = device.indexOf(a.deviceId);
            const bIndex = device.indexOf(b.deviceId);
            if (aIndex !== -1 && bIndex !== -1) {
                return aIndex - bIndex; // All in device, in order of device
            }
            else if (aIndex !== -1) {
                return -1; // Only 'a' is in the device, 'a' is in the front row
            }
            else if (bIndex !== -1) {
                return 1; // Only 'b' is in the device, 'b' is in the front row
            }
            return 0; // Neither 'a' nor 'b' is in the device, no change in order
        });
        console.log('find simulators:');
        console.log(simList);
        return simList;
    }
    static searchSimulator(deviceId) {
        const cmd = new XcrunCMD().simctl().listDevices('Apple Vision Pro').line +
            ` | grep ${deviceId}`;
        console.log(cmd);
        let res = (0, child_process_1.execSync)(cmd);
        console.log(res.toString());
        return this.parseDeviceInfo(res.toString());
    }
    static createSimulator() {
        utils_1.CliLog.warn('no visionOS simulator found');
        utils_1.CliLog.warn('try create a visionOS simulator');
        // list support device include Apple Vision Pro
        let res = (0, child_process_1.execSync)(new XcrunCMD().simctl().listDeviceTypes().line);
        const supportDevice = this.parseSupportDevices(res.toString());
        // list support runtime include visionOS
        res = (0, child_process_1.execSync)(new XcrunCMD().simctl().listRuntimes().line);
        const supportRuntime = this.parseSupportRuntimes(res.toString());
        // use device and runtime to create simulator
        utils_1.CliLog.info(`use ${supportDevice} and ${supportRuntime} to create visionOS simulator`);
        res = (0, child_process_1.execSync)(new XcrunCMD().simctl().create(supportDevice, supportRuntime).line);
        const device = res.toString().trim();
        console.log(`create visionOS simulator: ${device}`);
        return {
            name: 'WebSpatial Simulator',
            deviceId: device,
            state: 'Shutdown',
        };
    }
    static listSimulator() {
        let res = (0, child_process_1.execSync)(new XcrunCMD().simctl().listDevices('Apple Vision Pro').line);
        return this.parseListDevices(res.toString());
    }
}
exports.default = Xcrun;
class XcrunCMD {
    constructor() {
        this.line = 'xcrun';
    }
    altool() {
        this.line += ' altool';
        return this;
    }
    simctl() {
        this.line += ' simctl';
        return this;
    }
    list() {
        this.line += ' list';
        return this;
    }
    listDevices(device) {
        this.line += ` list devices "${device}"`;
        return this;
    }
    listDeviceTypes() {
        this.line += ` list devicetypes`;
        return this;
    }
    listRuntimes() {
        this.line += ` list runtimes`;
        return this;
    }
    validate(path) {
        this.line += ` --validate-app -f ${path}`;
        return this;
    }
    uploadApp(path) {
        this.line += ` --upload-app -f ${path}`;
        return this;
    }
    uploadPackage(path) {
        this.line += ` --upload-package ${path}`;
        return this;
    }
    authAccount(username, password) {
        this.line += ` -u ${username} -p ${password}`;
        return this;
    }
    authApi(key, issuer) {
        this.line += ` --apiKey ${key} --apiIssuer ${issuer}`;
        return this;
    }
    appleId(id) {
        this.line += ` --apple-id ${id}`;
        return this;
    }
    platform(platform) {
        this.line += ` -t ${platform}`;
        return this;
    }
    version(version) {
        this.line += ` --bundle-version ${version}`;
        return this;
    }
    verbose() {
        this.line += ` --verbose`;
        return this;
    }
    create(device, runtime) {
        this.line += ` create "WebSpatialSimulator" "${device}" "${runtime}"`;
        return this;
    }
    shutdown(device) {
        this.line += ` shutdown "${device}"`;
        return this;
    }
    boot(device) {
        this.line += ` boot "${device}"`;
        return this;
    }
    install(device, path) {
        this.line += ` install "${device}" "${path}"`;
        return this;
    }
    launch(device, packName) {
        this.line += ` launch "${device}" "${packName}"`;
        return this;
    }
    terminate(device, packName) {
        this.line += ` terminate "${device}" "${packName}"`;
        return this;
    }
}
