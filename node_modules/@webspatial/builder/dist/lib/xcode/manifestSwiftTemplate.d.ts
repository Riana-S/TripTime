export declare const manifestSwiftTemplate = "\nimport Foundation\n\nvar pwaManager = PWAManager()\n\nstruct PWAManager: Codable {\n    var isLocal: Bool = false\n    var start_url: String = \"START_URL\"\n    var scope: String = \"SCOPE\"\n    var id: String = \"AppID\"\n\n    var name: String = \"AppName\"\n    var short_name: String = \"name\"\n    var description: String = \"Description\"\n\n    var display: PWADisplayMode = .minimal\n    var display_override: [PWADisplayMode] = []\n    var protocol_handlers: [PWAProtocol] = [PWAProtocol(protocolValue: \"\", url: \"\")]\n    var mainScene: WindowContainerOptions = .init(\n        defaultSize: .init(\n            width: SceneWidth,\n            height: SceneHeight\n        ),\n        resizability: SceneResizability\n    )\n    private var version: String = \"PACKAGE_VERSION\"\n\n    mutating func _init() {\n        let urlType = start_url.split(separator: \"://\").first\n        if !(urlType == \"http\" || urlType == \"https\") {\n            if scope == \"\" || scope == \"/\" {\n                scope = \"./\"\n            }\n            let startUrl = Bundle.main.url(forResource: start_url, withExtension: \"\", subdirectory: \"\")\n            start_url = startUrl!.absoluteString\n            scope = URL(string: (scope.starts(with: \"/\") ? \".\" : \"./\") + scope, relativeTo: Bundle.main.executableURL)!.absoluteString\n            isLocal = true\n        }\n\n        if display_override.count > 0 {\n            display = display_override[0]\n        }\n\n        for i in 0 ... protocol_handlers.count - 1 {\n            let item = protocol_handlers[i]\n            protocol_handlers[i].updateUrl(scope + item.url)\n        }\n    }\n\n    func checkInScope(url: String) -> Bool {\n        return url.starts(with: scope)\n    }\n\n    // web+spatial://test\n    func checkInDeeplink(url: String) -> String {\n        var linkUrl: String = url\n        for item in protocol_handlers {\n            if linkUrl.starts(with: item.protocolValue) {\n                let queryString: String = linkUrl.replacingOccurrences(of: item.protocolValue, with: \"\").addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!\n                linkUrl = item.url.replacingOccurrences(of: \"%s\", with: item.protocolValue + queryString)\n            }\n        }\n        logger.debug(linkUrl)\n        return linkUrl\n    }\n\n    func getLocalResourceURL(url: String) -> String {\n        let path = String(url.split(separator: \"file://\").first!.split(separator: \"?\").first!)\n        let newUrl = URL(string: url)\n        let fileManager = FileManager.default\n        if fileManager.fileExists(atPath: newUrl!.path) {\n            return url\n        }\n        var resource: String = Bundle.main.url(forResource: newUrl?.path, withExtension: \"\", subdirectory: \"\")?.absoluteString ?? \"\"\n        if resource == \"\" {\n            resource = Bundle.main.url(forResource: \"static-web\" + path, withExtension: \"\", subdirectory: \"\")?.absoluteString ?? \"\"\n        }\n        if resource == \"\" {\n            return url\n        }\n        if newUrl?.query() != nil {\n            resource += \"?\" + (newUrl?.query())!\n        }\n        if newUrl?.fragment() != nil {\n            resource += \"#\" + (newUrl?.fragment())!\n        }\n        return resource\n    }\n    \n    func getVersion() -> String {\n        return version\n    }\n}\n\nenum PWADisplayMode: Codable {\n    case minimal\n    case standalone\n    case fullscreen\n}\n\nstruct PWAProtocol: Codable {\n    var protocolValue: String = \"\"\n    var url: String = \"\"\n\n    mutating func updateUrl(_ str: String) {\n        url = str\n    }\n}\n\n";
