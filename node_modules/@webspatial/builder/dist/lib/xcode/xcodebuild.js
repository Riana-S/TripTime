"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XcodebuildCMD = void 0;
const fs = require("fs");
const path_1 = require("path");
const resource_1 = require("../resource");
const semver_1 = require("semver");
const file_1 = require("../resource/file");
const { execSync, exec } = require('child_process');
class Xcodebuild {
    static async project() {
        try {
            await new Promise((resolve, reject) => {
                const projectFile = resource_1.PROJECT_DIRECTORY + '/web-spatial.xcodeproj';
                const execRes = execSync(new XcodebuildCMD().project(projectFile).list().line);
                console.log(execRes.toString());
                resolve(execRes);
            });
        }
        catch (error) {
            console.log(error);
        }
    }
    static async list() {
        try {
            await new Promise((resolve, reject) => {
                const projectFile = resource_1.PROJECT_DIRECTORY + '/web-spatial.xcodeproj';
                const execRes = execSync(new XcodebuildCMD().project(projectFile).list().line);
                console.log(execRes.toString());
                resolve(execRes);
            });
        }
        catch (error) {
            console.log(error);
        }
    }
    static async archive(exportPath) {
        try {
            console.log('start archive');
            if (!fs.existsSync(resource_1.PROJECT_EXPORT_DIRECTORY)) {
                fs.mkdirSync(resource_1.PROJECT_EXPORT_DIRECTORY, { recursive: true });
            }
            return await new Promise((resolve, reject) => {
                const projectFile = resource_1.PROJECT_DIRECTORY + '/web-spatial.xcodeproj';
                // Archive
                const archiveRes = execSync(new XcodebuildCMD()
                    .project(projectFile)
                    .scheme('web-spatial')
                    .archive((0, path_1.join)(resource_1.PROJECT_BUILD_DIRECTORY, './pack'))
                    .clean().line);
                let resString = archiveRes.toString();
                if (resString.indexOf('ARCHIVE SUCCEEDED') > 0) {
                    console.log('------------------- ARCHIVE SUCCEEDED -------------------');
                    console.log('start export');
                    // Export
                    const outRes = execSync(new XcodebuildCMD()
                        .output((0, path_1.join)(resource_1.PROJECT_BUILD_DIRECTORY, 'pack.xcarchive'), resource_1.PROJECT_EXPORT_DIRECTORY, (0, path_1.join)(resource_1.PROJECT_BUILD_DIRECTORY, 'ExportOptions.plist'))
                        .allowProvisioningUpdates().line);
                    resString = outRes.toString();
                    if (resString.indexOf('EXPORT SUCCEEDED') > 0) {
                        // copy .ipa file to export path
                        const useExportPath = exportPath !== null && exportPath !== void 0 ? exportPath : './build';
                        const path = (0, path_1.join)(process.cwd(), useExportPath);
                        if (!fs.existsSync(path)) {
                            fs.mkdirSync(path, { recursive: true });
                        }
                        (0, file_1.copyDir)(resource_1.PROJECT_EXPORT_DIRECTORY, path);
                        console.log('------------------- EXPORT SUCCEEDED -------------------');
                        resolve(true);
                    }
                    (0, semver_1.clean)(resource_1.PROJECT_BUILD_DIRECTORY);
                }
                resolve(false);
            });
        }
        catch (error) {
            console.log(error);
        }
    }
}
exports.default = Xcodebuild;
class XcodebuildCMD {
    constructor() {
        this.line = 'xcodebuild';
    }
    project(xcodeproj) {
        this.line += ` -project ${xcodeproj}`;
        return this;
    }
    list() {
        this.line += ' -list';
        return this;
    }
    scheme(schemeName) {
        this.line += ` -scheme ${schemeName}`;
        return this;
    }
    archive(path) {
        this.line += ` -archivePath ${path} archive`;
        return this;
    }
    allowProvisioningUpdates() {
        this.line += ' -allowProvisioningUpdates';
        return this;
    }
    destination(target) {
        this.line += ` -destination '${target}'`;
        return this;
    }
    output(archivePath, outPath, plistPath) {
        this.line += ` -exportArchive -archivePath ${archivePath} -exportPath ${outPath} -exportOptionsPlist ${plistPath}`;
        return this;
    }
    clean() {
        this.line += ' clean';
        return this;
    }
}
exports.XcodebuildCMD = XcodebuildCMD;
