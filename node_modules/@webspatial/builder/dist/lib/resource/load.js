"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadJsonFromNet = loadJsonFromNet;
exports.loadJsonFromDisk = loadJsonFromDisk;
exports.loadImageFromNet = loadImageFromNet;
exports.loadImageFromDisk = loadImageFromDisk;
exports.loadFileString = loadFileString;
const fs = require("fs");
const FetchUtils_1_1 = require("../utils/FetchUtils-1");
const CustomError_1 = require("../utils/CustomError");
const Jimp = require("jimp");
const imageHelper_1 = require("./imageHelper");
async function loadJsonFromNet(url) {
    const response = await FetchUtils_1_1.fetchUtils.fetch(url, { encoding: 'binary' });
    if (response.status !== 200) {
        throw new CustomError_1.CustomError({
            code: 3004,
            message: `Failed to download Web Manifest ${url}.` +
                `The response status is ${response.status}, please check the Web Manifest access address`,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message_staring_params: {
                web_manifest_url: url,
                status: response.status,
            },
        });
    }
    try {
        let body;
        if (response.text) {
            body = await response.text();
        }
        else {
            if (['gzip', 'deflate', 'br'].includes(response.headers['content-encoding'])) {
                body = FetchUtils_1_1.fetchUtils
                    .decompressResponseBuffer(Buffer.from(response.data, 'binary'), response.headers['content-encoding'])
                    .toString();
            }
            else {
                body = Buffer.from(response.data, 'binary').toString();
            }
        }
        return JSON.parse(body.trim());
    }
    catch (err) {
        throw new CustomError_1.CustomError({
            code: 3005,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message: 'Manifest file embedded in the website is not a legal JSON file, please reconfigure',
            message_staring_params: {},
        });
    }
}
async function loadJsonFromDisk(url) {
    const jsonString = await loadFileString(url.toString());
    return JSON.parse(jsonString);
}
async function loadImageFromNet(src) {
    const response = await FetchUtils_1_1.fetchUtils.fetch(src, { encoding: 'binary' });
    if (response.status !== 200) {
        // throw new Error(
        //   `Failed to download icon ${iconUrl}. Responded with status ${response.status}`);
        throw new CustomError_1.CustomError({
            code: 2002,
            message: `Failed to download icon. Responded with status ${response.status}`,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message_staring_params: { icon_url: src, status: response.status },
        });
    }
    const contentType = response.headers.get
        ? response.headers.get('content-type')
        : response.headers['content-type'];
    if (!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith('image/'))) {
        // throw new Error(`Received icon "${iconUrl}" with invalid Content-Type.` +
        //     ` Responded with Content-Type "${contentType}"`);
        throw new CustomError_1.CustomError({
            code: 2003,
            message: `Received icon with invalid Content-Type.` +
                ` Responded with Content-Type "${contentType}"`,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message_staring_params: { icon_url: src, contentType },
        });
    }
    let body;
    if (response.arrayBuffer) {
        body = await response.arrayBuffer();
    }
    else {
        if (['gzip', 'deflate', 'br'].includes(response.headers['content-encoding'])) {
            body = FetchUtils_1_1.fetchUtils.decompressResponseBuffer(Buffer.from(response.data, 'binary'), response.headers['content-encoding']);
        }
        else {
            body = Buffer.from(response.data, 'binary');
        }
    }
    if (contentType.startsWith('image/svg')) {
        const textDecoder = new TextDecoder();
        try {
            body = await imageHelper_1.ImageHelper.svg2img(textDecoder.decode(body));
        }
        catch (error) {
            // throw new Error(`Problem reading ${iconUrl}: ${error}`);
            throw new CustomError_1.CustomError({
                code: 2004,
                message: `Problem reading ${src}: ${error}`,
                // eslint-disable-next-line @typescript-eslint/camelcase
                message_staring_params: { icon_url: src, error },
            });
        }
    }
    if (contentType.startsWith('image/webp')) {
        body = await imageHelper_1.ImageHelper.webp2PngBuffer(body);
    }
    return await Jimp.read(Buffer.from(body));
}
async function loadImageFromDisk(src) {
    return await Jimp.read(src);
}
async function loadFileString(url) {
    let file = await fs.promises.readFile(url.toString());
    return file.toString();
}
