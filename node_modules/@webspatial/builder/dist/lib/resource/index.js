"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceManager = exports.LOGO_DIRECTORY = exports.MIDDLE_APPICON_DIRECTORY = exports.BACK_APPICON_DIRECTORY = exports.ASSET_DIRECTORY = exports.WEB_PROJECT_DIRECTORY = exports.PROJECT_TEST_DIRECTORY = exports.PROJECT_EXPORT_DIRECTORY = exports.PROJECT_BUILD_DIRECTORY = exports.PROJECT_DIRECTORY = void 0;
const fs = require("fs");
const path_1 = require("path");
const file_1 = require("./file");
const load_1 = require("./load");
const child_process_1 = require("child_process");
exports.PROJECT_DIRECTORY = '';
exports.PROJECT_BUILD_DIRECTORY = '';
exports.PROJECT_EXPORT_DIRECTORY = '';
exports.PROJECT_TEST_DIRECTORY = '';
exports.WEB_PROJECT_DIRECTORY = 'web-spatial/static-web';
exports.ASSET_DIRECTORY = 'web-spatial/Assets.xcassets';
exports.BACK_APPICON_DIRECTORY = exports.ASSET_DIRECTORY +
    '/AppIcon.solidimagestack/Back.solidimagestacklayer/Content.imageset';
exports.MIDDLE_APPICON_DIRECTORY = exports.ASSET_DIRECTORY +
    '/AppIcon.solidimagestack/Middle.solidimagestacklayer/Content.imageset';
exports.LOGO_DIRECTORY = exports.ASSET_DIRECTORY + '/logo.imageset';
const supportPlatform = ['visionos'];
class ResourceManager {
    static async moveProjectFrom(dir) {
        // Copy the web project to the static-web directory under the xcode project
        const fromDirectory = (0, path_1.join)(process.cwd(), dir);
        const targetDirctory = (0, path_1.join)(exports.PROJECT_DIRECTORY, exports.WEB_PROJECT_DIRECTORY);
        // Ensure `targetDirectory` exists.
        if (!fs.existsSync(targetDirctory)) {
            fs.mkdirSync(targetDirctory, { recursive: true });
        }
        else {
            // If a directory already exists, clear it first
            (0, file_1.clearDir)(targetDirctory);
        }
        try {
            (0, file_1.copyDir)(fromDirectory, targetDirctory);
        }
        catch (err) {
            console.log(err);
        }
    }
    static async generateIcon(info) {
        const manifestJson = info.json;
        const imgUrl = manifestJson.icons[0].src;
        const icon = !imgUrl.startsWith('http')
            ? await (0, load_1.loadImageFromDisk)(imgUrl)
            : await (0, load_1.loadImageFromNet)(imgUrl);
        icon.resize(1024, 1024);
        return icon;
    }
    static initPlatform(platform) {
        this.setupTempPath(platform);
        this.pullPlatformModule(platform);
    }
    static setupTempPath(platform) {
        const usePlatform = platform !== null && platform !== void 0 ? platform : supportPlatform[0];
        if (!supportPlatform.includes(usePlatform)) {
            throw new Error(`not support platform ${usePlatform}, now WebSpatial only support ${supportPlatform.join(',')}`);
        }
        let tempDir = './node_modules/.webspatial-builder-temp';
        let tempPlatformDir = (0, path_1.join)(tempDir, `platform-${usePlatform}`);
        let tempProjectDir = (0, path_1.join)(tempPlatformDir, './project');
        let temBuildDir = (0, path_1.join)(tempPlatformDir, './build');
        let temExportDir = (0, path_1.join)(tempPlatformDir, './export');
        let temTestDir = (0, path_1.join)(tempPlatformDir, './test');
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir);
        }
        if (!fs.existsSync(tempPlatformDir)) {
            fs.mkdirSync(tempPlatformDir);
        }
        exports.PROJECT_DIRECTORY = tempProjectDir;
        exports.PROJECT_BUILD_DIRECTORY = temBuildDir;
        exports.PROJECT_EXPORT_DIRECTORY = temExportDir;
        exports.PROJECT_TEST_DIRECTORY = temTestDir;
    }
    /**
     * @description Check and set the platform path to ensure the existence of the specified platform module.
     * If the module does not exist, it will be installed automatically.
     * Also set the project directory, build directory, and export directory.
     * @param platform The name of the platform to check, defaulting to 'visionos'
     */
    static pullPlatformModule(platform) {
        const usePlatform = platform !== null && platform !== void 0 ? platform : supportPlatform[0];
        if (!supportPlatform.includes(usePlatform)) {
            throw new Error(`not support platform ${usePlatform}, now WebSpatial only support ${supportPlatform.join(',')}`);
        }
        let modulePath = (0, path_1.join)(process.cwd(), `node_modules/@webspatial/platform-${usePlatform}`);
        // If the module does not exist in the current working directory, try to get it from the cli directory
        if (!fs.existsSync(modulePath)) {
            modulePath = (0, path_1.join)(__dirname, `../../../node_modules/@webspatial/platform-${usePlatform}`);
        }
        const hasModule = fs.existsSync(modulePath);
        // If the module does not exist, execute the npm installation command
        if (!hasModule) {
            (0, child_process_1.execSync)(`cd ${(0, path_1.join)(__dirname, '../../../')} && pnpm add @webspatial/platform-${usePlatform}`);
        }
        if (fs.existsSync(exports.PROJECT_DIRECTORY)) {
            (0, child_process_1.execSync)(`rm -rf ${exports.PROJECT_DIRECTORY}`);
        }
        if (!fs.existsSync(exports.PROJECT_BUILD_DIRECTORY)) {
            fs.mkdirSync(exports.PROJECT_BUILD_DIRECTORY);
        }
        if (!fs.existsSync(exports.PROJECT_EXPORT_DIRECTORY)) {
            fs.mkdirSync(exports.PROJECT_EXPORT_DIRECTORY);
        }
        if (!fs.existsSync(exports.PROJECT_TEST_DIRECTORY)) {
            fs.mkdirSync(exports.PROJECT_TEST_DIRECTORY);
        }
        fs.mkdirSync(exports.PROJECT_DIRECTORY);
        (0, file_1.copyDir)(modulePath, exports.PROJECT_DIRECTORY);
    }
}
exports.ResourceManager = ResourceManager;
