"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PWAGenerator = void 0;
const path_1 = require("path");
const config_1 = require("./config");
const load_1 = require("../resource/load");
const validate_1 = require("./validate");
const fs = require("fs");
const utils_1 = require("../utils/utils");
class PWAGenerator {
    static async generator(args, isDev = false) {
        let manifestInfo = await this.validate(args, isDev);
        console.log('check manifest.json: ok');
        await this.config(manifestInfo, args, isDev);
        console.log('reset manifest.json: ok');
        return manifestInfo;
    }
    static async validate(args, isDev = false) {
        var _a, _b;
        let manifest = {};
        let url = '';
        let fromNet = false;
        let useDefault = false;
        // load manifest.json
        if (args['manifestUrl']) {
            url = args['manifestUrl'];
            fromNet = true;
            manifest = await (0, load_1.loadJsonFromNet)(args['manifestUrl']);
        }
        else {
            if (args['manifest']) {
                url = (0, path_1.join)(process.cwd(), args['manifest']);
            }
            else {
                url = (0, path_1.join)(process.cwd(), 'public/manifest.json');
                if (!fs.existsSync(url)) {
                    url = (0, path_1.join)(process.cwd(), 'public/manifest.webmanifest');
                }
            }
            if (!fs.existsSync(url)) {
                if (isDev) {
                    useDefault = true;
                    utils_1.CliLog.warn('manifest.json or manifest.webmanifest not found, use default in run mode');
                }
                else {
                    throw new Error('manifest.json or manifest.webmanifest not found');
                }
            }
            manifest = useDefault
                ? this.defaultManifestJson
                : await (0, load_1.loadJsonFromDisk)(url);
            manifest =
                isDev && !useDefault ? this.compareManifest(manifest) : manifest;
            this.useDefaultManifestJson = useDefault;
        }
        // check manifest.json
        (0, validate_1.checkManifestJson)(manifest, isDev);
        let start_url = (0, config_1.configStartUrl)(manifest, (_a = args['base']) !== null && _a !== void 0 ? _a : '', url, fromNet);
        var isNetWeb = (0, validate_1.checkStartUrl)(start_url, url, fromNet, isDev);
        manifest.start_url = start_url;
        if (!isDev)
            (0, validate_1.checkId)(manifest, (_b = args['bundleId']) !== null && _b !== void 0 ? _b : '');
        await (0, validate_1.checkIcons)(manifest, url, isDev);
        return {
            json: manifest,
            url,
            fromNet: isNetWeb,
        };
    }
    static compareManifest(manifest) {
        var _a, _b, _c;
        manifest.name =
            manifest.name && manifest.name.length > 0
                ? manifest.name
                : this.defaultManifestJson.name;
        manifest.display = (_a = manifest.display) !== null && _a !== void 0 ? _a : this.defaultManifestJson.display;
        manifest.start_url =
            (_b = manifest.start_url) !== null && _b !== void 0 ? _b : this.defaultManifestJson.start_url;
        manifest.scope = (_c = manifest.scope) !== null && _c !== void 0 ? _c : this.defaultManifestJson.scope;
        return manifest;
    }
    // generate manifest
    static config(manifestInfo, args, isDev) {
        var _a;
        let bundleId = (_a = args['bundleId']) !== null && _a !== void 0 ? _a : '';
        if (isDev && !manifestInfo.json.id) {
            bundleId = this.defaultBundleId;
        }
        (0, config_1.configId)(manifestInfo.json, bundleId);
        (0, config_1.configScope)(manifestInfo.json);
        (0, config_1.configDisplay)(manifestInfo.json);
        (0, config_1.configDeeplink)(manifestInfo.json);
        (0, config_1.configMainScene)(manifestInfo.json);
    }
}
exports.PWAGenerator = PWAGenerator;
// Supported display modes for TWA
PWAGenerator.DisplayModes = ['standalone', 'minimal-ui'];
PWAGenerator.defaultBundleId = 'com.webspatial.test';
PWAGenerator.defaultManifestJson = {
    name: 'WebSpatialTest',
    display: 'minimal-ui',
    start_url: '/',
    scope: '/',
};
PWAGenerator.useDefaultManifestJson = false;
