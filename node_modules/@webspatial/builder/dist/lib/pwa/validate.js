"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkManifestJson = checkManifestJson;
exports.checkStartUrl = checkStartUrl;
exports.checkIcons = checkIcons;
exports.checkId = checkId;
exports.validateBundleId = validateBundleId;
exports.validateURL = validateURL;
const path_1 = require("path");
const CustomError_1 = require("../utils/CustomError");
const utils_1 = require("../utils/utils");
const imageHelper_1 = require("../resource/imageHelper");
const load_1 = require("../resource/load");
const utils_2 = require("../utils/utils");
function checkManifestJson(manifestJson, isDev = false) {
    var _a;
    const errors = [];
    if ((!manifestJson.name || manifestJson.name.length === 0) &&
        !manifestJson['short_name'] &&
        !isDev) {
        errors.push({
            code: 3006,
            message: 'In the Web Spatial App Manifest, it is necessary to provide the name property or short_name property (preferably both)',
            // eslint-disable-next-line @typescript-eslint/camelcase
            message_staring_params: {},
        });
    }
    if (!((_a = manifestJson.icons) === null || _a === void 0 ? void 0 : _a.length) && !isDev) {
        errors.push({
            code: 3007,
            message: 'In the Web Spatial App Manifest, the icons property must be provided and it should include at least one icon object',
            // eslint-disable-next-line @typescript-eslint/camelcase
            message_staring_params: {},
        });
    }
    if (!manifestJson['start_url'] && !isDev) {
        errors.push({
            code: 3008,
            message: 'In the Web Spatial App Manifest, the start_url property must be provided',
            // eslint-disable-next-line @typescript-eslint/camelcase
            message_staring_params: {},
        });
    }
    if (errors.length) {
        throw new CustomError_1.CustomError(errors);
    }
}
function checkStartUrl(startUrl, manifestUrl, isNet, isDev = false) {
    if (isDev) {
        return startUrl.startsWith('https://') || startUrl.startsWith('http://');
    }
    if (startUrl.startsWith('http://')) {
        throw new CustomError_1.CustomError({
            code: 4000,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message: 'In the Web Spatial App Manifest, the start_url must use https',
            message_staring_params: {},
        });
    }
    return startUrl.startsWith('https://');
}
async function checkIcons(manifest, manifestUrl, isDev = false) {
    var _a, _b;
    if (!((_a = manifest.icons) === null || _a === void 0 ? void 0 : _a.length) && isDev) {
        manifest.icons = [
            {
                src: (0, path_1.join)(__dirname, '../../assets/icon-default.png'),
                sizes: '1024x1024',
                purpose: 'maskable',
            },
        ];
        utils_2.CliLog.warn('icon not found, use default in run mode');
        return;
    }
    const relativeUrl = (0, utils_1.parseRouter)(manifestUrl);
    let maxSizeImage;
    let maxSizeImageUrl;
    let maxSizePurpose;
    let maxSize = 0;
    for (var i = 0; i < manifest.icons.length; i++) {
        const item = manifest.icons[i];
        let hasMaskable = ((_b = item.purpose) === null || _b === void 0 ? void 0 : _b.indexOf('maskable')) >= 0;
        if (!hasMaskable)
            continue;
        let has1024 = false;
        let imgUrl = item.src;
        let image;
        let imageSize = 0;
        if (!validateURL(imgUrl)) {
            imgUrl = (0, path_1.join)(relativeUrl, imgUrl);
        }
        // If size has been configured, determine the size; otherwise, download the icon for judgment
        if (item.sizes) {
            const mulSize = item.sizes.split(' ');
            mulSize.forEach((size) => {
                let wh = size.split('x');
                if (Number(wh[0]) >= 1024 && Number(wh[1]) >= 1024) {
                    has1024 = true;
                    if (Number(wh[0]) > imageSize) {
                        imageSize = Number(wh[0]);
                    }
                }
            });
        }
        else {
            image = !imgUrl.startsWith('http')
                ? await (0, load_1.loadImageFromDisk)(imgUrl)
                : await (0, load_1.loadImageFromNet)(imgUrl);
            if (image.getWidth() >= 1024 && image.getHeight() >= 1024) {
                has1024 = true;
                if (image.getWidth() > imageSize) {
                    imageSize = image.getWidth();
                }
            }
        }
        // Download all the icons used, check their width and height, and if they meet the size and maskability requirements, finally check their alpha
        if (has1024 && hasMaskable) {
            if (imageSize > maxSize) {
                maxSize = imageSize;
                maxSizeImage = image;
                maxSizeImageUrl = imgUrl;
                maxSizePurpose = item.purpose;
            }
        }
    }
    // There is no icon that satisfies both size>=1024 and purpose including Maskable
    if (maxSize === 0) {
        if (isDev) {
            manifest.icons = [
                {
                    src: (0, path_1.join)(__dirname, '../../assets/icon-default.png'),
                    sizes: '1024x1024',
                    purpose: 'maskable',
                },
            ];
            utils_2.CliLog.warn('In the Web Spatial App on VisionPro, the icon must be greater than or equal to 1024x1024, and the purpose parameter must include maskable');
            utils_2.CliLog.warn('icon does not meet the standard, use default icon in run mode');
            return;
        }
        throw new CustomError_1.CustomError({
            code: 4000,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message: 'In the Web Spatial App on VisionPro, the icon must be greater than or equal to 1024x1024, and the purpose parameter must include maskable',
            message_staring_params: {},
        });
    }
    else if (maxSizeImageUrl) {
        maxSizeImage = !maxSizeImageUrl.startsWith('http')
            ? await (0, load_1.loadImageFromDisk)(maxSizeImageUrl)
            : await (0, load_1.loadImageFromNet)(maxSizeImageUrl);
    }
    // Check if the image is completely opaque
    if (maxSizeImage && !imageHelper_1.ImageHelper.isFullyOpaque(maxSizeImage)) {
        if (isDev) {
            manifest.icons = [
                {
                    src: (0, path_1.join)(__dirname, '../../assets/icon-default.png'),
                    sizes: '1024x1024',
                    purpose: 'maskable',
                },
            ];
            utils_2.CliLog.warn('In the Web Spatial App on VisionPro, the icon must be greater than or equal to 1024x1024, and the purpose parameter must include maskable');
            utils_2.CliLog.warn('No matching icon found, use default icon');
            return;
        }
        throw new CustomError_1.CustomError({
            code: 4000,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message: 'In the Web Spatial App on VisionPro, must be a fully opaque bitmap.',
            message_staring_params: {},
        });
    }
    manifest.icons = [
        {
            src: maxSizeImageUrl,
            sizes: maxSize + 'x' + maxSize,
            purpose: maxSizePurpose,
        },
    ];
}
function checkId(manifest, bundleId) {
    if (bundleId) {
        if (!validateBundleId(bundleId)) {
            throw new CustomError_1.CustomError({
                code: 4000,
                // eslint-disable-next-line @typescript-eslint/camelcase
                message: 'In the Web Spatial App Manifest, the bundle ID must be in reverse domain format (e.g. com.example.app) and no longer than 128 characters',
                message_staring_params: {},
            });
        }
        return;
    }
    if (!manifest.id) {
        manifest.id = manifest.start_url;
    }
    if (!validateURL(manifest.id) && !bundleId) {
        throw new CustomError_1.CustomError({
            code: 4000,
            // eslint-disable-next-line @typescript-eslint/camelcase
            message: 'In the Web Spatial App Manifest, the id or start_url must be a valid URL, or provide it use --bundle-id',
            message_staring_params: {},
        });
    }
}
function validateBundleId(bundleId) {
    // iOS official specification regex (supports reverse domain name format validation)
    // 1. Allowed: letters/numbers/hyphens/underscores/dots
    // 2. Disallow: consecutive dots/leading or trailing dots
    // 3. Each part starts with a letter or underscore
    // 4. Total length 1-128 characters
    const iosBundleIdRegex = /^(?=.{1,128}$)(?!.*\.\.)(?!^\.|.*\.$)[A-Za-z_][A-Za-z0-9_-]*(?:\.[A-Za-z_][A-Za-z0-9_-]*)+$/;
    return iosBundleIdRegex.test(bundleId);
}
function validateURL(url) {
    try {
        new URL(url);
        return true;
    }
    catch (error) {
        return false;
    }
}
