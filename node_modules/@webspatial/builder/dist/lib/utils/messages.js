"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messages = void 0;
const colors_1 = require("colors");
exports.messages = {
    promptInstallJdk: `Do you want picoxr-web to install the JDK (recommended)?
  (Enter "No" to use your own JDK 11 installation)`,
    promptJdkPath: 'Path to your existing JDK 11:',
    messageDownloadJdk: 'Downloading JDK 11 to ',
    messageDownloadJdkSrc: 'Downloading the JDK 11 Sources...',
    messageDecompressJdkSrc: 'Decompressing the JDK 11 Sources...',
    messageDownloadJdkBin: 'Downloading the JDK 11 Binaries...',
    messageDecompressJdkBin: 'Decompressing the JDK 11 Binaries...',
    promptInstallSdk: `Do you want picoxr-web to install the Android SDK (recommended)?
  (Enter "No" to use your own Android SDK installation)`,
    promptSdkPath: 'Path to your existing Android SDK:',
    messageDownloadSdk: 'Downloading Android SDK to ',
    errorSdkTerms: 'Downloading Android SDK failed because Terms and Conditions was not signed.',
    promptSdkTerms: `Do you agree to the Android SDK terms and conditions at ${(0, colors_1.underline)('https://developer.android.com/studio/terms.html')}?`,
    messageDownloadAndroidSdk: 'Downloading the Android SDK...',
    messageDecompressAndroidSdk: 'Decompressing the Android SDK...',
    messageInstallingBuildTools: 'Installing Android Build Tools. Please, read and accept the ' +
        'license agreement.',
    messageGeneratingAndroidProject: 'Generating Android Project.',
    // 可安装检测成功输出
    messageCheckSuccess: (url, redirectLocation) => {
        return ` URL ${(0, colors_1.cyan)(url)} ${redirectLocation ? `redirected to ${(0, colors_1.cyan)(redirectLocation)}` : ''} validation successful.Here is the relevant information:`;
    },
    errorMissingManifestParameter: 'Missing required parameter ' +
        `${(0, colors_1.cyan)('--manifest-url')} or ${(0, colors_1.cyan)('--manifest')}`,
    messageInitializingWebManifest: (manifestUrl) => {
        return `Initializing application from Web Manifest:\n\t-  ${(0, colors_1.cyan)(manifestUrl)}`;
    },
    messageInitializingLocalManifest: (manifestPath) => {
        return `Initializing application from Local Manifest:\n\t-  ${(0, colors_1.cyan)(manifestPath)}`;
    },
    messageInvalidIcon: (iconPath) => {
        return `Invalid icon path: ${(0, colors_1.cyan)(iconPath)}`;
    },
    errorStartUrlNotReachable: (launchUrl) => `URL ${launchUrl} can not be accessible.` +
        'Please check your internet connection or start_url in manifest file.',
    warnFamilyPolicy: (0, colors_1.bold)((0, colors_1.yellow)('WARNING: ')) +
        'Trusted Web Activities are currently incompatible' +
        ' with applications\ntargeting children under the age of 13.' +
        ' Check out the Play for' +
        ' Families\npolicies to learn more.\n' +
        (0, colors_1.cyan)('https://play.google.com/console/about/families/'),
    // 本地manifest,交互式提供icon
    promptIconUrl: 'Icon URL:',
    errorInvalidUrl: (url) => {
        return `Invalid URL: ${url}`;
    },
    errorUrlMustBeImage: (mimeType) => {
        return `URL must resolve to an image/* mime-type, but resolved to ${mimeType}.`;
    },
    promptVersionCode: 'Starting version code for the new app version:',
    promptVersionName: 'Starting version name for the new app version:',
    messageSigningKeyInformation: (0, colors_1.underline)(`\nSigning key information ${(0, colors_1.green)('(5/5)')}`),
    //   messageSigningKeyInformationDesc: `
    // Please, enter information about the key store containing the keys that will be used
    // to sign the application. If a key store does not exist on the provided path,
    // picoxr-web will prompt for the creation of a new keystore.
    // \t- ${bold('Key store location:')} The location of the key store in the file
    // \t  system.
    // \t- ${bold('Key name:')} The alias used on the key.
    // Read more about Android signing keys at:
    // \t ${cyan('https://developer.android.com/studio/publish/app-signing')}\n`,
    // promptKeyAlias: 'Key name:',
    messageProjectGeneratedSuccess: '\nProject generated successfully.',
    // 创建keystore
    messageSigningKeyCreation: (0, colors_1.underline)('\nSigning key creation'),
    messageSigningKeyNotFound: (path) => {
        return `\nAn existing key store could not be found at "${path}".\n`;
    },
    promptCreateKey: 'Do you want to create one now?',
    promptKeyFullName: 'First and Last names (eg: PICO):',
    promptKeyOrganizationalUnit: 'Organizational Unit (eg: PICO Dept):',
    promptKeyOrganization: 'Organization (eg: Company Name):',
    promptKeyCountry: 'Country (2 letter code):',
    promptKeystorePassword: 'Password for the Key Store:',
    promptKeyPassword: 'Password for the Key:',
    messageBuildingApp: '\nBuilding the Android App...',
    messageEnterPasswords: (keypath, keyalias) => {
        return `Please, enter passwords for the keystore ${(0, colors_1.cyan)(keypath)} and alias \
${(0, colors_1.cyan)(keyalias)}.\n`;
    },
    // build时，校验输入的keystore和key的密码长度
    errorMinLength: (minLength, actualLength) => {
        return `Minimum length is ${minLength} but input is ${actualLength}.`;
    },
    errorMaxLength: (maxLength, actualLength) => {
        return `Maximum length is ${maxLength} but input is ${actualLength}.`;
    },
    errorInvalidInteger: (integer) => {
        return `Invalid integer provided: ${integer}`;
    },
    messageApkSuccess: (filename) => {
        return `\t- Generated Android APK at ${(0, colors_1.cyan)(filename)}`;
    },
    // 可安装检测url参数缺失
    missingUrlToCheck: 'Missing required parameter ' + `${(0, colors_1.cyan)('--url')}`,
};
