"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs = require("fs");
const utils_1 = require("./utils");
const resource_1 = require("../resource");
/*
  Histoy is used to record information about successful execution of the run command,
  including cmd, manifest, appInfo, simulator.
  The historical record is used to determine whether the current execution is the same as the historical execution.
  If the current execution is the same as the historical execution, the historical record will be used to avoid repeated execution.
  If the current execution is different from the historical execution, the historical record will be overwritten.
*/
class CliHistory {
    /*
      If history file not exist, create it
      If history file exist, read it
      If history file is empty, use default history
    */
    static init(cmd) {
        let historyFile = (0, path_1.join)(__dirname, '../../run_history.txt');
        let history = this.defaultHistory;
        if (!fs.existsSync(historyFile)) {
            fs.writeFileSync(historyFile, '');
        }
        else {
            try {
                history = JSON.parse(fs.readFileSync(historyFile, 'utf-8'));
                console.log('Historical records found');
            }
            catch (e) {
                utils_1.CliLog.warn('No historical records found');
            }
        }
        this.history = history;
        this.record.cmd = cmd;
    }
    static getAppInfoRecord() {
        return this.record.appInfo;
    }
    static getSimulatorRecord() {
        return this.record.simulator;
    }
    static getSimulatorHistory() {
        return this.history.simulator;
    }
    static recordManifest(manifest) {
        this.record.manifest = manifest;
        this.record.appInfo.name = manifest.name;
        this.record.appInfo.id = manifest.id;
    }
    static recordSimulator(simulator) {
        this.record.simulator = simulator;
    }
    static checkManifest(manifest) {
        return this.compareObjects(this.history.manifest, manifest);
    }
    // Check whether the test app exists
    static checkTestAppIsExist() {
        const appInfo = this.getAppInfoRecord();
        const appFile = (0, path_1.join)(resource_1.PROJECT_TEST_DIRECTORY, `Build/Products/Debug-xrsimulator/${appInfo.name}.app`);
        return fs.existsSync(appFile);
    }
    // Compare whether two objects are equal
    static compareObjects(obj1, obj2) {
        if (obj1 === null || obj2 === null) {
            return false;
        }
        // 1. Check if the number of properties is the same
        const keys1 = Object.keys(obj1);
        const keys2 = Object.keys(obj2);
        if (keys1.length !== keys2.length) {
            return false;
        }
        // 2. Deep comparison of each attribute
        for (const key of keys1) {
            const value1 = obj1[key];
            const value2 = obj2[key];
            // Dealing with undefined/null situations
            if (value1 === undefined || value2 === undefined) {
                if (value1 !== value2)
                    return false;
                continue;
            }
            // Recursive comparison of nested objects
            if (typeof value1 === 'object' && value1 !== null) {
                if (!this.compareObjects(value1, value2))
                    return false;
                continue;
            }
            // Basic comparison of primitive types
            if (value1 !== value2) {
                console.log(`Mismatch found at key: ${key}`);
                return false;
            }
        }
        return true;
    }
    static checkCommand(cmd) {
        return this.history.cmd === cmd;
    }
    static write() {
        let historyFile = (0, path_1.join)(__dirname, '../../run_history.txt');
        fs.writeFileSync(historyFile, JSON.stringify(this.record));
    }
}
CliHistory.defaultHistory = {
    cmd: '',
    manifest: {},
    appInfo: { name: '', id: '' },
    simulator: '',
};
CliHistory.record = {
    cmd: '',
    manifest: {},
    appInfo: { name: '', id: '' },
    simulator: '',
};
exports.default = CliHistory;
