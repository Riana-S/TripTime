import * as React$1 from 'react';
import React__default, { ReactNode, CSSProperties, ElementType, ForwardedRef } from 'react';
import { BackgroundMaterialType, CornerRadius, SpatialEntity, Vec3, SpatialSession, WindowContainerOptions as WindowContainerOptions$1 } from '@webspatial/core-sdk';
import { ModelViewerElement } from '@google/model-viewer';
import { WindowContainerOptions } from '@webspatial/core-sdk/';
export { WindowContainerOptions } from '@webspatial/core-sdk/';

type vecType = {
    x: number;
    y: number;
    z: number;
};
type quatType = {
    x: number;
    y: number;
    z: number;
    w: number;
};

type spatialStyleDef = {
    position: Partial<vecType>;
    rotation: quatType;
    scale: Partial<vecType>;
    zIndex?: number;
    material?: {
        type: BackgroundMaterialType;
    };
    cornerRadius: number | CornerRadius;
    visible?: boolean;
};
interface SpatialReactComponentProps {
    allowScroll?: boolean;
    scrollWithParent?: boolean;
    spatialStyle?: Partial<spatialStyleDef>;
    children?: ReactNode;
    className?: string;
    style?: CSSProperties | undefined;
    component?: ElementType;
    debugName?: string;
    debugShowStandardInstance?: boolean;
}
type SpatialReactComponentRef = ForwardedRef<HTMLDivElement>;

declare const SpatialReactComponent: React$1.ForwardRefExoticComponent<SpatialReactComponentProps & React$1.RefAttributes<HTMLDivElement>>;

declare function withSpatial(Component: React__default.ElementType): any;
declare const SpatialPrimitive: Record<string, typeof SpatialReactComponent>;
declare const SpatialDiv: React__default.ForwardRefExoticComponent<SpatialReactComponentProps & React__default.RefAttributes<HTMLDivElement>>;

declare function withSpatialMonitor(El: React__default.ElementType): any;

type SpatialMonitorProps = {
    El?: ElementType;
};
declare const SpatialMonitor: React$1.ForwardRefExoticComponent<SpatialMonitorProps & React$1.RefAttributes<HTMLElement>>;

/**
 * External-developers can call this function to sync the standardInstance layout to PortalInstance.
 *
 * Currently: notifyUpdateStandInstanceLayout is called when the document head changed
 * or when the monitored div changed (in both cases spatialDiv's layout may be changed, so we need to update the layout)
 */
declare function notifyUpdateStandInstanceLayout(): void;

declare function parseCornerRadius(computedStyle: CSSStyleDeclaration): {
    topLeading: number;
    bottomLeading: number;
    topTrailing: number;
    bottomTrailing: number;
};

declare const CSSSpatialComponent: React$1.ForwardRefExoticComponent<SpatialReactComponentProps & React$1.RefAttributes<HTMLDivElement>>;

declare function withCSSSpatial(Component: React__default.ElementType): any;
declare const CSSSpatialPrimitive: Record<string, typeof CSSSpatialComponent>;
declare const CSSSpatialDiv: React__default.ForwardRefExoticComponent<SpatialReactComponentProps & React__default.RefAttributes<HTMLDivElement>>;

interface SpatialViewProps extends React__default.HTMLAttributes<HTMLDivElement> {
    onViewLoad?: (viewEnt: SpatialEntity) => void;
    onViewUnload?: () => void;
}
interface SpatialViewRef extends HTMLDivElement {
    getViewEntity: () => Promise<SpatialEntity | null>;
}
/**
 * [Experimental] Allows embedding 3D dynamic content within the webpage
 */
declare const SpatialView: React__default.ForwardRefExoticComponent<SpatialViewProps & React__default.RefAttributes<SpatialViewRef>>;

type PartialSpatialTransformType = {
    position?: Partial<vecType>;
    rotation?: Partial<quatType>;
    scale?: Partial<vecType>;
};
interface ModelEvent {
    target: ModelElement;
}
interface ModelDragEvent extends ModelEvent {
    eventType: 'dragstart' | 'dragend' | 'drag';
    translation3D: Vec3;
    startLocation3D: Vec3;
}
interface Model3DProps {
    spatialTransform?: PartialSpatialTransformType;
    modelUrl: string;
    visible: boolean;
    contentMode?: 'fill' | 'fit';
    resizable?: boolean;
    aspectRatio?: number;
    className?: string;
    style?: CSSProperties | undefined;
    children?: React.ReactNode;
    onLoad?: (event: ModelEvent) => void;
    onDragStart?: (dragEvent: ModelDragEvent) => void;
    onDrag?: (dragEvent: ModelDragEvent) => void;
    onDragEnd?: (dragEvent: ModelDragEvent) => void;
    onTap?: (event: ModelEvent) => void;
    onDoubleTap?: (event: ModelEvent) => void;
    onLongPress?: (event: ModelEvent) => void;
}
interface ModelElement extends HTMLDivElement {
    ready: boolean;
    currentSrc: string;
}
type ModelElementRef = ForwardedRef<ModelElement>;
type CSSModel3DProps = Omit<Model3DProps, 'spatialTransform' | 'visible'>;

declare const Model3D: React$1.ForwardRefExoticComponent<Model3DProps & React$1.RefAttributes<ModelElement>>;

declare const CSSModel3D: React$1.ForwardRefExoticComponent<CSSModel3DProps & React$1.RefAttributes<ModelElement>>;

declare global {
    namespace JSX {
        interface IntrinsicElements {
            'model-viewer': ModelViewerElement | {
                ref: any;
            };
        }
    }
}
type ModelChildren = React__default.ReactElement<{
    type: string;
    src: string;
}> | [React__default.ReactElement<{
    type: string;
    src: string;
}>, React__default.ReactElement] | React__default.ReactElement<{
    type: string;
    src: string;
}>[];
interface ModelProps {
    className?: string;
    style?: CSSProperties | undefined;
    children: ModelChildren;
    onLoad?: (event: ModelEvent) => void;
    contentMode?: 'fill' | 'fit';
    resizable?: boolean;
    aspectRatio?: number;
    onDragStart?: (dragEvent: ModelDragEvent) => void;
    onDrag?: (dragEvent: ModelDragEvent) => void;
    onDragEnd?: (dragEvent: ModelDragEvent) => void;
    onTap?: (event: ModelEvent) => void;
    onDoubleTap?: (event: ModelEvent) => void;
    onLongPress?: (event: ModelEvent) => void;
    poster?: string;
}
declare const Model: React__default.ForwardRefExoticComponent<ModelProps & React__default.RefAttributes<ModelElement>>;

/** @hidden */
declare function getSession(): SpatialSession | null;

declare function enableDebugTool(): void;

declare const defaultSceneConfig: WindowContainerOptions;
declare class XRApp {
    private static instance;
    static getInstance(): XRApp;
    handleATag(event: MouseEvent): true | undefined;
    init(): void;
    deinit(): void;
    private configMap;
    private getConfig;
    show(window: Window, cfg: WindowContainerOptions): Promise<void>;
    open: (url?: string, target?: string, features?: string) => Window | null;
    initScene(name: string, callback: (pre: WindowContainerOptions) => WindowContainerOptions): void;
}

declare function initScene(name: string, callback: (pre: WindowContainerOptions$1) => WindowContainerOptions$1): void;

declare function spatialPolyfill(): void;

declare const version: string;

export { CSSModel3D, CSSSpatialDiv, CSSSpatialPrimitive, Model, Model3D, type Model3DProps, type ModelDragEvent, type ModelElement, type ModelElementRef, type ModelEvent, type ModelProps, SpatialDiv, type SpatialReactComponentProps as SpatialDivProps, type SpatialReactComponentRef as SpatialDivRef, SpatialMonitor, SpatialPrimitive, type SpatialReactComponentProps, type SpatialReactComponentRef, SpatialView, type SpatialViewRef, XRApp, defaultSceneConfig, enableDebugTool, getSession, initScene, notifyUpdateStandInstanceLayout, parseCornerRadius, spatialPolyfill, version, withCSSSpatial, withSpatial, withSpatialMonitor };
