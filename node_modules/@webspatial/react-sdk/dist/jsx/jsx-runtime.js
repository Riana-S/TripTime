
      (function(){
        if(typeof window === 'undefined') return;
        if(!window.__webspatialsdk__) window.__webspatialsdk__ = {}
        window.__webspatialsdk__['react-sdk-version'] = "1.0.4"
        window.__webspatialsdk__['XR_ENV'] = "avp"
    })()
      

// src/polyfill/spatialPolyfill.ts
import { parseCornerRadius, getSession as getSession2, XRApp as XRApp2 } from "@webspatial/react-sdk";

// src/polyfill/injectSceneHook.ts
import { getSession } from "@webspatial/react-sdk";
import { defaultSceneConfig, XRApp } from "@webspatial/react-sdk";
async function injectSceneHook() {
  if (!window.opener) return;
  if (window._SceneHookOff) return;
  await getSession()?.setLoading("show");
  function onContentLoaded(callback) {
    if (document.readyState === "interactive" || document.readyState === "complete") {
      callback();
    } else {
      document.addEventListener("DOMContentLoaded", callback);
    }
  }
  onContentLoaded(async () => {
    let cfg = defaultSceneConfig;
    if (typeof window.xrCurrentSceneDefaults === "function") {
      try {
        cfg = await window.xrCurrentSceneDefaults?.(defaultSceneConfig);
      } catch (error) {
        console.error(error);
      }
    }
    await new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve(null);
      }, 1e3);
    });
    await getSession()?.setLoading("hide");
    await XRApp.getInstance().show(window, cfg);
  });
}

// src/polyfill/spatialPolyfill.ts
var isWebSpatialEnv = getSession2() !== null;
var SpatialGlobalCustomVars = {
  backgroundMaterial: "--xr-background-material"
};
var htmlBackgroundMaterial = "";
function setCurrentWindowStyle(backgroundMaterial) {
  if (backgroundMaterial !== htmlBackgroundMaterial) {
    const session = getSession2();
    session.getCurrentWindowComponent().setStyle({
      material: { type: backgroundMaterial }
    });
    htmlBackgroundMaterial = backgroundMaterial;
  }
}
function checkHtmlBackgroundMaterial() {
  const computedStyle = getComputedStyle(document.documentElement);
  const backgroundMaterial = computedStyle.getPropertyValue(
    SpatialGlobalCustomVars.backgroundMaterial
  );
  setCurrentWindowStyle(backgroundMaterial || "none");
}
var htmlCornerRadius = {
  topLeading: 0,
  bottomLeading: 0,
  topTrailing: 0,
  bottomTrailing: 0
};
function checkCornerRadius() {
  const computedStyle = getComputedStyle(document.documentElement);
  const cornerRadius = parseCornerRadius(computedStyle);
  setCornerRadius(cornerRadius);
}
function setCornerRadius(cornerRadius) {
  if (htmlCornerRadius.topLeading !== cornerRadius.topLeading || htmlCornerRadius.bottomLeading !== cornerRadius.bottomLeading || htmlCornerRadius.topTrailing !== cornerRadius.topTrailing || htmlCornerRadius.bottomTrailing !== cornerRadius.bottomTrailing) {
    const session = getSession2();
    if (!session) return;
    session.getCurrentWindowComponent().setStyle({
      cornerRadius
    });
    htmlCornerRadius.topLeading = cornerRadius.topLeading;
    htmlCornerRadius.bottomLeading = cornerRadius.bottomLeading;
    htmlCornerRadius.topTrailing = cornerRadius.topTrailing;
    htmlCornerRadius.bottomTrailing = cornerRadius.bottomTrailing;
  }
}
function setOpacity(opacity) {
  const session = getSession2();
  if (!session) return;
  session.getCurrentWindowComponent().setOpacity(opacity);
}
function checkOpacity() {
  const computedStyle = getComputedStyle(document.documentElement);
  const opacity = parseFloat(computedStyle.getPropertyValue("opacity"));
  setOpacity(opacity);
}
async function setHtmlVisible(visible) {
  const session = getSession2();
  if (!session) return;
  const wc = session.getCurrentWindowComponent();
  const ent = await wc.getEntity();
  ent?.setVisible(visible);
}
function checkHtmlVisible() {
  const computedStyle = getComputedStyle(document.documentElement);
  const visibility = computedStyle.getPropertyValue("visibility") !== "hidden";
  setHtmlVisible(visibility);
}
function hijackDocumentElementStyle() {
  const rawDocumentStyle = document.documentElement.style;
  const styleProxy = new Proxy(rawDocumentStyle, {
    set: function(target, key, value) {
      const ret = Reflect.set(target, key, value);
      if (key === SpatialGlobalCustomVars.backgroundMaterial) {
        setCurrentWindowStyle(value);
      }
      if (key === "border-radius" || key === "borderRadius" || key === "border-top-left-radius" || key === "borderTopLeftRadius" || key === "border-top-right-radius" || key === "borderTopRightRadius" || key === "border-bottom-left-radius" || key === "borderBottomLeftRadius" || key === "border-bottom-right-radius" || key === "borderBottomRightRadius") {
        checkCornerRadius();
      }
      if (key === "opacity") {
        checkOpacity();
      }
      if (key === "visibility" || key === "display") {
        checkHtmlVisible();
      }
      return ret;
    },
    get: function(target, prop) {
      if (typeof target[prop] === "function") {
        return function(...args) {
          if (prop === "setProperty") {
            const [property, value] = args;
            if (property === SpatialGlobalCustomVars.backgroundMaterial) {
              setCurrentWindowStyle(value);
            }
          } else if (prop === "removeProperty") {
            const [property] = args;
            if (property === SpatialGlobalCustomVars.backgroundMaterial) {
              setCurrentWindowStyle("none");
            }
          }
          return target[prop](
            ...args
          );
        };
      }
      return Reflect.get(target, prop);
    }
  });
  Object.defineProperty(document.documentElement, "style", {
    get: function() {
      return styleProxy;
    }
  });
}
function monitorExternalStyleChange() {
  const headObserver = new MutationObserver(function(mutationsList) {
    checkCSSProperties();
  });
  headObserver.observe(document.head, { childList: true, subtree: true });
}
function checkCSSProperties() {
  checkHtmlBackgroundMaterial();
  checkCornerRadius();
  checkOpacity();
  checkHtmlVisible();
  window.addEventListener("resize", checkHtmlVisible);
}
function hijackGetComputedStyle() {
  const rawFn = window.getComputedStyle.bind(window);
  window.getComputedStyle = (element, pseudoElt) => {
    if (element.__isSpatialDiv) {
      return element.__getComputedStyle(rawFn, pseudoElt);
    }
    return rawFn(element, pseudoElt);
  };
}
function hijackWindowOpen() {
  XRApp2.getInstance().init();
}
function monitorHTMLAttributeChange() {
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === "attributes" && mutation.attributeName) {
        checkCSSProperties();
      }
    });
  });
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["style", "class"]
  });
  window.addEventListener("load", () => {
    checkCSSProperties();
  });
}
function spatialPolyfill() {
  if (!isWebSpatialEnv) {
    return;
  }
  injectSceneHook();
  hijackWindowOpen();
  checkCSSProperties();
  hijackGetComputedStyle();
  hijackDocumentElementStyle();
  monitorExternalStyleChange();
  monitorHTMLAttributeChange();
}

// src/jsx/jsx-runtime.ts
import { Fragment } from "react/jsx-runtime";

// src/jsx/jsx-shared.ts
import { jsxDEV as _jsxDEV } from "react/jsx-dev-runtime";
import reactJSXRuntime from "react/jsx-runtime";
import { withCSSSpatial, withSpatialMonitor } from "@webspatial/react-sdk";
var attributeFlag = "enable-xr";
var styleFlag = "enableXr";
var classFlag = "__enableXr__";
var xrMonitorFlag = "enable-xr-monitor";
function replaceToSpatialPrimitiveType(type, props) {
  const propsObject = props;
  if (attributeFlag in propsObject) {
    delete propsObject[attributeFlag];
    return withCSSSpatial(type);
  }
  if (xrMonitorFlag in propsObject) {
    delete propsObject[xrMonitorFlag];
    return withSpatialMonitor(type);
  }
  if (propsObject && propsObject.style && styleFlag in propsObject.style) {
    delete propsObject.style[styleFlag];
    return withCSSSpatial(type);
  }
  if (propsObject && propsObject.className) {
    const originalClassNames = propsObject.className.split(" ");
    const idx = originalClassNames.indexOf(classFlag);
    if (idx !== -1) {
      originalClassNames.splice(idx, 1);
      propsObject.className = originalClassNames.join(" ");
      return withCSSSpatial(type);
    }
  }
  return type;
}
function jsxs(type, props, key) {
  type = replaceToSpatialPrimitiveType(type, props);
  return reactJSXRuntime.jsxs(type, props, key);
}
function jsx(type, props, key) {
  type = replaceToSpatialPrimitiveType(type, props);
  return reactJSXRuntime.jsx(type, props, key);
}

// src/jsx/jsx-runtime.ts
spatialPolyfill();
export {
  Fragment,
  jsx,
  jsxs
};
//# sourceMappingURL=jsx-runtime.js.map