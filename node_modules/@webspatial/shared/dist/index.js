// src/pluginUtils.ts
var AVP = "avp";
function getEnv() {
  const env = process.env.XR_ENV;
  return env === "avp" ? "avp" : void 0;
}
function getFinalBase(userBase, mode, pluginOutputDir = "/webspatial/avp") {
  if (mode === "avp") {
    if (userBase !== void 0) {
      return userBase;
    } else {
      return pluginOutputDir;
    }
  }
  return userBase;
}
function getFinalOutdir(userOutDir = "dist", mode, pluginOutputDir = "/webspatial/avp") {
  if (mode === "avp") {
    pluginOutputDir = removeFirstSlash(pluginOutputDir);
    return `${userOutDir}/${pluginOutputDir}`;
  }
  return userOutDir;
}
function addFirstSlash(input) {
  if (input === void 0 || input.length === 0) return "";
  if (input[0] !== "/") return "/" + input;
  return input;
}
function removeFirstSlash(input) {
  if (input === void 0) return "";
  let idx = 0;
  while (idx < input.length && input[idx] === "/") {
    idx += 1;
  }
  return input.slice(idx);
}
function getReactSDKAliasByMode(mode) {
  if (mode === "avp") {
    return { "@webspatial/react-sdk$": "@webspatial/react-sdk/default" };
  }
  return { "@webspatial/react-sdk$": "@webspatial/react-sdk/web" };
}
function getReactSDKAliasReplacementByMode(mode) {
  if (mode === "avp") {
    return {
      find: /^@webspatial\/react-sdk$/,
      replacement: "@webspatial/react-sdk/default"
    };
  }
  return {
    find: /^@webspatial\/react-sdk$/,
    replacement: "@webspatial/react-sdk/web"
  };
}
function getJSXAliasByMode(mode) {
  if (mode === "avp") {
    return {
      "@webspatial/react-sdk/jsx-dev-runtime": "@webspatial/react-sdk/default/jsx-dev-runtime",
      "@webspatial/react-sdk/jsx-runtime": "@webspatial/react-sdk/default/jsx-runtime"
    };
  }
  return {
    "@webspatial/react-sdk/jsx-dev-runtime": "@webspatial/react-sdk/web/jsx-dev-runtime",
    "@webspatial/react-sdk/jsx-runtime": "@webspatial/react-sdk/web/jsx-runtime"
  };
}
function getJSXImportSourceByMode(mode) {
  if (mode === "avp") {
    return "@webspatial/react-sdk/default";
  }
  return "@webspatial/react-sdk/web";
}
function getDefineByMode(mode) {
  if (mode === "avp") {
    return {
      "window.XR_ENV": JSON.stringify("avp"),
      "process.env.XR_ENV": JSON.stringify("avp"),
      "import.meta.env.XR_ENV": JSON.stringify("avp")
    };
  }
  return {
    "window.XR_ENV": void 0,
    "process.env.XR_ENV": void 0,
    "import.meta.env.XR_ENV": void 0
  };
}
function getDefineXrEnvBase(finalBase) {
  return {
    __XR_ENV_BASE__: JSON.stringify(finalBase ?? "")
  };
}
export {
  AVP,
  addFirstSlash,
  getDefineByMode,
  getDefineXrEnvBase,
  getEnv,
  getFinalBase,
  getFinalOutdir,
  getJSXAliasByMode,
  getJSXImportSourceByMode,
  getReactSDKAliasByMode,
  getReactSDKAliasReplacementByMode,
  removeFirstSlash
};
//# sourceMappingURL=index.js.map